논리연산자     and=&&,     or=||( shift + 엔터 위 키),      not=!  
  int a = 3+10;  // 더하기
  a = 65-3;    // 빼기
  a = 3*2;    // 곱하기
  a = 7/4;    // 나누기
  a = 7%4;    // 나머지
  
	%o = 형식지정자	, 10진수 정수를 8진수로 변환
	%x = 		,  		   16진수로 변환		   
	
반복문      break=중지,       continue=건너뛰기          while, for문 둘 다 사용가능

avg = 평균, sum = 합계, 

break label 문 = 하나의 반복문을 빠져나가려는 break 문과 달리 여러개의 반복문을 빠져나갈 때 사용

Final
	변수	=	 변하지 않는 상수
			final 키워드를 public static과 함께 선언하면 공유가능한 상수가 된다.
	메소드 = 	재정의(오버라이딩) 불가능
			무조건 상속받아 사용하도록 하고자 할 때 사용
	클래스 = 	상속불가능
	

Interface = implements
abstract  =	extends

다형성(Polymorphism) = 하위클래스 참조가능

객체(Object) = extends object(작성하지 않아도 모든 클래스에 적용되어 있다)
	클래스에 선언된 모양 그대로 생성된 실체
	oop(객체지향프로그래밍)의 관점에서 클래스의 타입으로 선언되었을 때 ‘객체’라고 부른다.
	
인스턴스(Instance) 
	인스턴스는 객체에 포함된다고 볼 수 있다.
	객체를 소프트웨어에 실체화 하면 그것을 ‘인스턴스’라고 부른다.
	실체화된 인스턴스는 메모리에 할당된다.
	추상적인 개념(또는 명세)과 구체적인 객체 사이의 관계 에 초점을 맞출 경우에 사용한다.
	‘~의 인스턴스’ 의 형태로 사용된다.
	객체 간의 링크는 클래스 간의 연관 관계의 인스턴스다.
	실행 프로세스는 프로그램의 인스턴스다.
	즉, 인스턴스라는 용어는 반드시 클래스와 객체 사이의 관계로 한정지어서 사용할 필요는 없다.
	인스턴스는 어떤 원본(추상적인 개념)으로부터 ‘생성된 복제본’을 의미한다.

생성자(Constructor)
	선언방법 = public 클래스(매개변수)	{ ... }
			클래스는 생성자를 정의하는 클래스와 이름이 동일 하여야 한다.
			반환값이 없으므로 void나 자료형을 작성할 수 없다.
			상속이 되지 않는다

접근지정자
	public class  	: 	모든  package에서 해당 class로 접근이 가능하다.
	public method 	: 	모든 class에서 해당 method로 접근이 가능하다.

	private class  	: 	class 내의 멤버들에게만 접근이 허용된다.
	private method 	: 	자신이 포함된 class에서만 해당 method로 접근이 가능하다.


	protected class : 	같은 패키지 내의 모든 클래스에서 접근이 가능하다.
						다른 패키지에 있더라도 자식 클래스의 경우 접근이 허용된다..
	protected method: 	상속 받은 class와 자신이 속한 class에서만 접근이 가능하다.

	접근지정자 생략(디폴트 접근 지정)
		접근 지정자 없이 선언한 경우, 디폴트(default) 접근 지정으로 선언된다.
		오직 같은 패키지 내의 클래스들에게만 사용이 허용.

p174
static
	static 멤버는 클래스당 하나만 생성되는 멤버.
	동일 클래스의 모든 객체들이 공유하므로 '클래스 멤버'라고 부른다.
	프로그램 시작시나 클래스 로딩 시에 생성.
	객체와 상관없이 공간을 차지하고 있으며 프로그램이 종료될 때 사라진다.
	non-static 필드를 사용 할 수 없다.
non-static
	각 객체마다 별도로 생기므로 '인스턴스 멤버'라고 부른다.
	객체가 생길 때 함께 생성되고 사라지면 함께 사라진다.
	
	 
void = return되는 타입이 없음을 의미